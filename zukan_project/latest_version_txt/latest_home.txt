<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <title>新発田ずかん</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/css2?family=Mochiy+Pop+One&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <style>
        html, body {
            margin: 0; padding: 0;
            font-family: 'Mochiy Pop One', sans-serif;
            color: #fff;
            width: 100vw; height: 100vh;
            overflow: hidden;
            background: transparent;
        }
        #background-clear, #background-blur {
            position: fixed;
            top: 0; left: 0;
            width: 100vw; height: 100vh;
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            pointer-events: none;
            user-select: none;
            transition: background-image 1.5s cubic-bezier(.4,0,.2,1);
        }
        #background-clear { z-index: -2; }
        #background-blur {
            z-index: -1;
            filter: blur(4px);
            opacity: 0;
            transition: opacity 1.2s cubic-bezier(.4,0,.2,1), background-image 1.5s cubic-bezier(.4,0,.2,1);
        }
        .menu-toggle {
            position: absolute;
            top: 20px; left: 20px;
            font-size: 1.8em;
            color: white;
            background: rgba(0, 0, 0, 0.4);
            padding: 10px 12px;
            border-radius: 10px;
            z-index: 1000;
            cursor: pointer;
            transition: background 0.3s, left 0.35s ease-in-out;
        }
        .menu-toggle:hover {
            background: rgba(0, 0, 0, 0.6);
        }
        .side-menu {
            position: fixed;
            top: 0; left: -260px;
            width: 260px; height: 100%;
            background: rgba(20, 20, 20, 0.95);
            box-shadow: 2px 0 10px rgba(0,0,0,0.5);
            padding: 2em 1em 1em 1em;
            box-sizing: border-box;
            z-index: 999;
            transition: left 0.35s ease-in-out;
            display: flex;
            flex-direction: column;
            font-family: 'Mochiy Pop One', sans-serif !important;
        }
        .side-menu.open {
            left: 0;
        }
        .side-menu.open ~ .menu-toggle {
            left: 280px;
        }
        .side-menu .menu-title {
            font-size: 1.2em;
            font-weight: bold;
            margin-bottom: 1.5em;
            color: #fff;
            display: flex;
            align-items: center;
            gap: 0.6em;
            margin-left: 0.2em;
        }
        .side-menu a, .side-menu .menu-item {
            color: white;
            text-decoration: none;
            padding: 0.6em 0;
            font-size: 0.92em;
            display: flex;
            align-items: center;
            gap: 0.8em;
            transition: background 0.25s;
            border-radius: 6px;
            cursor: pointer;
            border: none;
            background: none;
            width: 100%;
            text-align: left;
            font-family: 'Mochiy Pop One', sans-serif !important;
        }
        .side-menu a:hover, .side-menu .menu-item:hover {
            background: rgba(255, 255, 255, 0.1);
        }
        .file-input {
            display: none;
        }
        .menu-divider {
            border-top: 1px solid rgba(255, 255, 255, 0.2);
            margin: 1em 0;
        }
        .overlay {
            position: absolute;
            top: 50%; left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.7s cubic-bezier(.4,0,.2,1);
            font-family: 'Mochiy Pop One', sans-serif;
        }
        .overlay.visible {
            opacity: 1;
            pointer-events: auto;
        }
        .title-block {
            margin-bottom: 50px;
            transform: translateY(-15px);
        }
        h1 {
            font-family: 'Mochiy Pop One', sans-serif;
            font-size: 5em;
            font-weight: normal;
            letter-spacing: 0.1em;
            margin: 0.1em 0 0.2em 0;
            color: #fff;
            text-shadow:
                -2px -2px 0 #000,
                2px -2px 0 #000,
                -2px 2px 0 #000,
                2px 2px 0 #000;
            user-select: none;
            background: none;
            -webkit-background-clip: none;
            -webkit-text-fill-color: initial;
            background-clip: none;
        }
        .subtitle {
            font-family: 'Mochiy Pop One', sans-serif;
            font-size: 1.7em;
            color: #fff;
            font-weight: 400;
            margin-bottom: 1.5em;
            line-height: 1.6;
            user-select: none;
            text-shadow:
                -1px -1px 0 #000,
                1px -1px 0 #000,
                -1px 1px 0 #000,
                1px 1px 0 #000;
        }
        .buttons {
            display: flex;
            flex-direction: column;
            gap: 20px;
            align-items: center;
            justify-content: center;
            font-family: 'Mochiy Pop One', sans-serif;
        }
        .buttons .button-link {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.6em;
            padding: 0.8em 1.5em;
            font-size: 1.2em;
            font-weight: bold;
            letter-spacing: 0.04em;
            color: #fff;
            background: linear-gradient(135deg, #FFA500, #FF7F50);
            text-decoration: none;
            border-radius: 18px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.22);
            transition: transform 0.3s, box-shadow 0.3s, background 0.3s;
            min-width: 170px;
            font-family: 'Mochiy Pop One', sans-serif;
        }
        .buttons .button-link i {
            font-size: 1.35em;
            width: 2.0em;
            text-align: center;
        }
        .buttons .button-link:hover {
            transform: translateY(-6px) scale(1.04);
            box-shadow: 0 12px 28px rgba(0, 0, 0, 0.3);
            background: linear-gradient(135deg, #FFD580 30%, #FFB347 100%);
        }
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(0, 200, 0, 0.9);
            color: white;
            padding: 10px 20px;
            border-radius: 8px;
            font-size: 0.9em;
            z-index: 1001;
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.3s ease;
            font-family: 'Mochiy Pop One', sans-serif;
        }
        .notification.show {
            opacity: 1;
            transform: translateX(0);
        }
        .notification.error {
            background: rgba(200, 0, 0, 0.9);
        }
        @media (max-width: 800px) {
            h1 { font-size: 2.7em; }
            .subtitle { font-size: 1em; }
            .button-link {
                width: 63vw;
                font-size: 1em;
                padding: 0.9em 0.7em;
            }
        }
        .recommend-badge {
            color: #FFD700;
            font-size: 0.95em;
            margin-left: 0.5em;
            font-family: 'Mochiy Pop One', sans-serif;
        }
    </style>
</head>
<body>
    <nav class="side-menu" id="sideMenu">
        <div class="menu-title"><i class="fa-solid fa-user"></i> ユーザー名</div>
        <a href="home.html"><i class="fa-solid fa-house"></i> ホーム</a>
        <a href="../zukan/list.html"><i class="fa-solid fa-scroll"></i> ずかん</a>
        <a href="../camera/camera.html"><i class="fa-solid fa-camera"></i> カメラ</a>
        <a href="../map/re.html"><i class="fa-solid fa-map"></i> マップ</a>

        <div class="menu-divider"></div>

        <button class="menu-item" id="shareData">
            <i class="fa-solid fa-share"></i> データを共有/ファイルに保存
        </button>
        <button class="menu-item" id="loadData">
            <i class="fa-solid fa-upload"></i> データをロード
        </button>
        <input type="file" id="fileInput" class="file-input" accept=".json">

        <div class="menu-divider"></div>
       
        <a href="settings.html"><i class="fa-solid fa-gear"></i> せってい</a>
        <a href="help.html"><i class="fa-solid fa-circle-question"></i> ヘルプ</a>
    </nav>
    <div class="menu-toggle" id="menuToggle">
        <i class="fa-solid fa-bars"></i>
    </div>
    <div id="background-clear"></div>
    <div id="background-blur"></div>
    <div class="overlay" id="overlay">
        <div class="title-block">
            <h1>新発田ずかん</h1>
            <div class="subtitle">しばたの自然と文化を楽しむWebアプリ</div>
        </div>
        <div class="buttons">
            <a href="../zukan/list.html" class="button-link"><i class="fa-solid fa-scroll"></i>ずかんを開く </a>
            <a href="../camera/camera.html" class="button-link"><i class="fa-solid fa-camera"></i>カメラを開く</a>
            <a href="../map/re.html" class="button-link"><i class="fa-solid fa-map"></i>マップを開く</a>
        </div>
    </div>
    <div class="notification" id="notification"></div>
    <script>
        // 背景画像
        const images = ['bg/background1.jpg', 'bg/background2.jpg', 'bg/background3.jpg'];
        let currentIndex = 0;
        const clearBg = document.getElementById('background-clear');
        const blurBg = document.getElementById('background-blur');

        // 通知表示関数
        function showNotification(message, isError = false) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = 'notification show' + (isError ? ' error' : '');
            setTimeout(() => {
                notification.classList.remove('show');
            }, 3000);
   }
        // 図鑑データ取得
        function getZukanData() {
            try {
                const zukanArray = JSON.parse(localStorage.getItem('myZukan')) || [];
                const userSettings = JSON.parse(localStorage.getItem('userSettings')) || {
                    username: "ユーザー名",
                    completedMissions: [],
                    preferences: {}
                };
                const uniqueNames = new Set(zukanArray.map(item => item.name));
                const categories = zukanArray.reduce((acc, item) => {
                    acc[item.category] = (acc[item.category] || 0) + 1;
                    return acc;
                }, {});
                return {
                    version: "1.0",
                    exportDate: new Date().toISOString(),
                    appName: "新発田ずかん",
                    discoveries: zukanArray.map(item => ({
                        id: item.id || `item_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                        name: item.name,
                        category: item.category,
                        description: item.description,
                        date: item.date,
                        matchCount: item.matchCount || 0,
                        totalSamples: item.totalSamples || 30,
                        accuracy: Math.round(((item.matchCount || 0) / (item.totalSamples || 30)) * 100),
                        discoveredAt: item.date
                    })),
                    settings: userSettings,
                    statistics: {
                        totalDiscoveries: zukanArray.length,
                        uniqueSpecies: uniqueNames.size,
                        categories: categories,
                        averageAccuracy: zukanArray.length > 0 ? 
                            Math.round(zukanArray.reduce((sum, item) => 
                                sum + ((item.matchCount || 0) / (item.totalSamples || 30) * 100), 0
                            ) / zukanArray.length) : 0
                    }
                };
            } catch (error) {
                console.error('データ取得エラー:', error);
                return {
                    version: "1.0",
                    exportDate: new Date().toISOString(),
                    appName: "新発田ずかん",
                    discoveries: [],
                    settings: { username: "ユーザー名", completedMissions: [], preferences: {} },
                    statistics: { totalDiscoveries: 0, uniqueSpecies: 0, categories: {}, averageAccuracy: 0 }
                };
            }
        }
        // 共有機能
        function shareZukanData() {
            try {
                const zukanData = getZukanData();
                const dataStr = JSON.stringify(zukanData, null, 2);
                const fileName = `shibata-zukan-data-${new Date().toISOString().split('T')[0]}.json`;
                // Web Share API
                if (navigator.share && navigator.canShare) {
                    const file = new File([dataStr], fileName, {
                        type: 'application/json',
                    });
                    if (navigator.canShare({ files: [file] })) {
                        navigator.share({
                            files: [file],
                            title: '新発田ずかんデータ',
                            text: `図鑑データ（${zukanData.statistics.totalDiscoveries}件の発見）をバックアップしました`
                        }).then(() => {
                            showNotification('データを他アプリやファイルに保存できます！');
                        }).catch((error) => {
                            console.log('共有がキャンセルされました:', error);
                        });
                        return;
                    }
                }
                // Web Share API非対応 → クリップボード
                if (navigator.clipboard && navigator.clipboard.writeText) {
                    navigator.clipboard.writeText(dataStr).then(() => {
                        const stats = zukanData.statistics;
                        showNotification(`データをクリップボードにコピーしました！（発見数: ${stats.totalDiscoveries}件）メモアプリなどに貼り付けて保存してください`);
                    }).catch(() => {
                        fallbackCopyMethod(dataStr, zukanData.statistics);
                    });
                } else {
                    fallbackCopyMethod(dataStr, zukanData.statistics);
                }
            } catch (error) {
                console.error('共有エラー:', error);
                showNotification('データの共有に失敗しました', true);
            }
        }
        // クリップボード失敗時のフォールバック
        function fallbackCopyMethod(text, stats) {
            const textArea = document.createElement('textarea');
            textArea.value = text;
            textArea.style.position = 'fixed';
            textArea.style.left = '-9999px';
            textArea.style.top = '-9999px';
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            try {
                document.execCommand('copy');
                showNotification(`データをクリップボードにコピーしました！（発見数: ${stats.totalDiscoveries}件）メモアプリなどに貼り付けて保存してください`);
            } catch (err) {
                textArea.style.position = 'fixed';
                textArea.style.top = '50px';
                textArea.style.left = '50px';
                textArea.style.width = '80%';
                textArea.style.height = '80%';
                textArea.style.zIndex = '10000';
                textArea.style.background = 'white';
                textArea.style.color = 'black';
                textArea.style.border = '2px solid #333';
                textArea.style.padding = '10px';
                showNotification('データを表示しました。全選択してコピーし、メモアプリに保存してください。画面外をタップすると閉じます。');
                const closeHandler = (e) => {
                    if (e.target !== textArea) {
                        document.body.removeChild(textArea);
                        document.removeEventListener('click', closeHandler);
                    }
                };
                setTimeout(() => {
                    document.addEventListener('click', closeHandler);
                }, 500);
                return;
            }
            document.body.removeChild(textArea);
        }
        // ロード
        function loadZukanData(file) {
            if (!file) {
                showNotification('ファイルが選択されていません', true);
                return;
            }
            if (!file.name.endsWith('.json')) {
                showNotification('JSONファイルを選択してください', true);
                return;
            }
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const data = JSON.parse(e.target.result);
                    if (!data.version) throw new Error('バージョン情報が見つかりません');
                    if (!data.discoveries || !Array.isArray(data.discoveries)) throw new Error('発見データが正しい形式ではありません');
                    const currentData = JSON.parse(localStorage.getItem('myZukan')) || [];
                    const importData = data.discoveries.map(item => ({
                        name: item.name,
                        category: item.category,
                        description: item.description,
                        date: item.date || item.discoveredAt || new Date().toISOString(),
                        matchCount: item.matchCount || 0,
                        totalSamples: item.totalSamples || 30,
                        id: item.id || `imported_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
                    }));
                    const existingKeys = new Set(currentData.map(item => `${item.name}-${item.date}`));
                    const newItems = importData.filter(item => 
                        !existingKeys.has(`${item.name}-${item.date}`)
                    );
                    const mergedData = [...currentData, ...newItems];
                    localStorage.setItem('myZukan', JSON.stringify(mergedData));
                    if (data.settings) {
                        const currentSettings = JSON.parse(localStorage.getItem('userSettings')) || {};
                        const mergedSettings = { ...currentSettings, ...data.settings };
                        localStorage.setItem('userSettings', JSON.stringify(mergedSettings));
                    }
                    const totalImported = data.discoveries.length;
                    const newDiscoveries = newItems.length;
                    const duplicates = totalImported - newDiscoveries;
                    let message = `データをロードしました！\n`;
                    message += `- 新規追加: ${newDiscoveries}件\n`;
                    if (duplicates > 0) {
                        message += `- 重複スキップ: ${duplicates}件\n`;
                    }
                    message += `- 現在の総発見数: ${mergedData.length}件`;
                    showNotification(message);
                    if (typeof init === 'function') {
                        setTimeout(() => init(), 1000);
                    }
                } catch (error) {
                    console.error('ロードエラー:', error);
                    showNotification(`ファイルの読み込みに失敗しました: ${error.message}`, true);
                }
            };
            reader.onerror = function() {
                showNotification('ファイルの読み込みに失敗しました', true);
            };
            reader.readAsText(file);        }
        // ロード
        function loadZukanData(file) {
            if (!file) {
                showNotification('ファイルが選択されていません', true);
                return;
            }
            if (!file.name.endsWith('.json')) {
                showNotification('JSONファイルを選択してください', true);
                return;
            }
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const data = JSON.parse(e.target.result);
                    if (!data.version) throw new Error('バージョン情報が見つかりません');
                    if (!data.discoveries || !Array.isArray(data.discoveries)) throw new Error('発見データが正しい形式ではありません');
                    const currentData = JSON.parse(localStorage.getItem('myZukan')) || [];
                    const importData = data.discoveries.map(item => ({
                        name: item.name,
                        category: item.category,
                        description: item.description,
                        date: item.date || item.discoveredAt || new Date().toISOString(),
                        matchCount: item.matchCount || 0,
                        totalSamples: item.totalSamples || 30,
                        id: item.id || `imported_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
                    }));
                    const existingKeys = new Set(currentData.map(item => `${item.name}-${item.date}`));
                    const newItems = importData.filter(item => 
                        !existingKeys.has(`${item.name}-${item.date}`)
                    );
                    const mergedData = [...currentData, ...newItems];
                    localStorage.setItem('myZukan', JSON.stringify(mergedData));
                    if (data.settings) {
                        const currentSettings = JSON.parse(localStorage.getItem('userSettings')) || {};
                        const mergedSettings = { ...currentSettings, ...data.settings };
                        localStorage.setItem('userSettings', JSON.stringify(mergedSettings));
                    }
                    const totalImported = data.discoveries.length;
                    const newDiscoveries = newItems.length;
                    const duplicates = totalImported - newDiscoveries;
                    let message = `データをロードしました！\n`;
                    message += `- 新規追加: ${newDiscoveries}件\n`;
                    if (duplicates > 0) {
                        message += `- 重複スキップ: ${duplicates}件\n`;
                    }
                    message += `- 現在の総発見数: ${mergedData.length}件`;
                    showNotification(message);
                    if (typeof init === 'function') {
                        setTimeout(() => init(), 1000);
                    }
                } catch (error) {
                    console.error('ロードエラー:', error);
                    showNotification(`ファイルの読み込みに失敗しました: ${error.message}`, true);
                }
            };
            reader.onerror = function() {
                showNotification('ファイルの読み込みに失敗しました', true);
            };
            reader.readAsText(file);
        }
        function updateBackground() {
            const nextIndex = (currentIndex + 1) % images.length;
            const nextImage = new Image();
            nextImage.src = images[nextIndex];
            nextImage.onload = () => {
                clearBg.style.backgroundImage = `url('${images[nextIndex]}')`;
                blurBg.style.backgroundImage = `url('${images[nextIndex]}')`;
                currentIndex = nextIndex;
            };
        }
        clearBg.style.backgroundImage = `url('${images[currentIndex]}')`;
        blurBg.style.backgroundImage = `url('${images[currentIndex]}')`;
        setTimeout(() => {
            blurBg.style.opacity = '1';
            setTimeout(() => {
                document.getElementById('overlay').classList.add('visible');
            }, 350);
        }, 500);
        setInterval(updateBackground, 5000);
        // メニュー開閉
        const menuToggle = document.getElementById('menuToggle');
        const sideMenu = document.getElementById('sideMenu');
        menuToggle.addEventListener('click', () => {
            sideMenu.classList.toggle('open');
        });

        // 「共有/ファイルに保存」ボタンのみ
        document.getElementById('shareData').addEventListener('click', () => {
            showNotification('「ファイルに保存」や他アプリでバックアップできます（推奨）', false);
            shareZukanData();
        });

        // ロード
        document.getElementById('loadData').addEventListener('click', () => {
            document.getElementById('fileInput').click();
        });
        document.getElementById('fileInput').addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                loadZukanData(file);
            }
            e.target.value = '';
        });
    </script>
</body>
</html>